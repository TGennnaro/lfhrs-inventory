// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

	locations Location[]
  logs Log[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id   String @id @default(cuid())
  name String
	user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
	userId String

  products Product[]
}

model Product {
  id         String   @id @default(cuid())
  name       String
  package    String
  min        Int      @default(5)
  max        Int?
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String

  items Item[]
	logs Log[]
}

model Item {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  expires   DateTime
}

model Log {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
	product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
	productId String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  type      LogType
  data      Json
}

enum LogType {
	QUANTITY_CHANGE
	ITEM_ADD
	ITEM_REMOVE
	STOCK_ORDER
}