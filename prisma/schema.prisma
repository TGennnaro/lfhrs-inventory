// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  // refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  // expires_in        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  stripe_customer_id String?
  accounts           Account[]
  // sessions      Session[]

  locations Location[]
  logs      Log[]
	subscriptions Subscription[]
	payments Payment[]

	@@index ([stripe_customer_id])
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model Location {
  id     String @id @default(cuid())
  name   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  products Product[]
}

model Product {
  id         String   @id @default(cuid())
  name       String
  package    String
  min        Int      @default(5)
  max        Int?
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String

  items Item[]
  logs  Log[]
}

model Item {
  id        String    @id @default(cuid())
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  // expires   DateTime?
  expires   DateTime? @default(now()) @db.Date // db.Date cuts space from 8 bytes to 4 bytes
  onOrder   Boolean   @default(false)
}

model Log {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  type      LogType
  quantity  Int?
  footnote  String?
}

model Subscription {
	id String @id
	user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
	userId String?
	tier Tier
	status String
	cancel_at_period_end Boolean @default(false)
	current_period_start DateTime? @db.Date
	current_period_end DateTime? @db.Date
	created DateTime? @db.Date
	ended_at DateTime? @db.Date

	@@index ([userId])
}

model Payment {
	id String @id
	user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
	userId String?
}

enum Tier {
  FREE
  MANAGER
  EXECUTIVE
}

enum LogType {
  ITEM_ORDER
  ITEM_ADD
  ITEM_REMOVE
  ITEM_UPDATE
  PRODUCT_ADD
  PRODUCT_REMOVE
  PRODUCT_UPDATE
  ITEM_CHECKOUT
}
